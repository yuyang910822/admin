# -*- coding: utf-8 -*-
"""
-------------------------------------------------
  @Time : 2021/1/11 21:44 
  @Auth : 于洋
  @File : 字符串.py
  @IDE  : PyCharm
  @Motto: ABC(Always Be Coding)
-------------------------------------------------
"""

# 字符串

"""
--字符串：
    索引：索引位置从0开始不是1，字符串末尾为-1
    切片：共有2中情况：
                1.start/end/step取值方向需一致，否则返回空
                2.无start/end则通过step决定取值方向，正为正序，负为反序
    内置方法：
        查找：
            1.startwith：判断字符串是否已入参作为字符传开头，返回布尔值
            2.endwith:判断字符串是否已入参作为参数结尾，返回布尔值
            3.find：检测字符是否字符串中，可以指定检索范围（start/end），如果是返回开始的索引位置，否则返回-1
            4.rfind：检测字符是否字符串中，可以指定检索范围（start/end），如果是返回开始的索引位置，否则返回-1.区别是从右查找
            5.index：检测字符是否在字符串中，可以指定检索范围（start/end），如果是返回开始的索引位置，若不存在报错
            6.rindex:检测字符是否在字符串中，可以指定检测范围（start/end）。如果存在返回开始的索引位置，否则报错。区别是从右查找
            
        替换：
            1.replace：把字符串中的字符替换新的字符，可以指定次数
            
        大小写：
            title：每个单词首字母大写
            lower：所有字符小写
            upper：所有字符大写
            
        截取字符串：
            lstrip：默认截取左边字符串，可指定截取字符
            rstrip:默认截取右边字符串，可指定截取字符
            strip：默认结束左右两边字符，可指定截取字符
        
        字符串拼接：
            spilt：通过指定字符进行分割，默认空格,\r,\t,\n.可指定分割数量
            join：把序列的元素和指定字符连接新的字符串 
        

"""

# 列表
"""
--列表：
    添加：
        1.append：再列表尾部添加一个元素
        2.extend：入参为列表，可添加多个元素进行列表合并
        3.insert：再列表指定位置添加值
        
        
    删除：
        1.clear：情况列表元素
        2.pop：根据索引删除，并返回删除的值
        3.remove:通过元素进行删除
        4.del：删除变量
    
    修改:
        1.变量[索引] = value
    
    查找:
        count：统计次数
        len：获取长度
        index：通过元素查找指定值的位置，可以设置检索范围（start/end），未找到报错
        enumerate：获取元素的索引和值
"""

# 元组
"""
元组：
    修改/删除/增加:
        进行数据类型转换后进行相关操作，最好转换成集合"""

# 字典
"""
字典：
    定义：
        字典key为标签存储value，相同key时顾后不顾前
    
    内置方法：
        获取：
            获取值：print(字典[key])
            获取全部key：字典.keys()
            获取全部value：字典.values()
            获取键值对：字典.items()
        增加：
            字典[key]=value
        修改：
            字典[key]=value
        删除：
            字典.pop(key)
            popitem(): 随机删除
            clear()：清空字典
            del：删除变量
        更新：
            字典.update() 把字典的键值对跟新到另一个字典
    
        
"""

# 集合
"""
集合：
    通过set()定义，其特点无序，用于去重
"""

# 可变不可变
"""
不可变数据类型(整数，元组):
    不允许变量的值发生变化，如果改变了变量的值，相当于是新建了一个对象，而对于相同的值的对象，在内存中则只有一个对象，
    内部会有一个引用计数来记录有多少个变量引用这个对象；
可变数据类型：
    允许变量的值发生变化，即如果对变量进行append、+=等这种操作后，只是改变了变量的值，而不会新建一个对象，
    变量引用的对象的地址也不会变化，不过对于相同的值的不同对象，在内存中则会存在不同的对象，即每个对象都有自己的地址，相当于内存中对于同值的对象保存了多份，这里不存在引用计数，是实实在在的对象。”
"""

# 有序无序
"""

"""

# open
"""
模式：
    模式	描述
    t	文本模式 (默认)。
    b	二进制模式。
    x	写模式，新建一个文件，如果该文件已存在则会报错。
    +	打开一个文件进行更新(可读可写)。
    U	通用换行模式（不推荐）。
    非文本操作（图片、视频、音频等，只能使用B模式）
    rb	以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。
    rb+	以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。
    wb	以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。
    wb+	以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。
    ab	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
    ab+	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。
    
    文本操作t模式（省去了编码与解码的环节）
    r	以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。
    r+	打开一个文件用于读写。文件指针将会放在文件的开头。
    w	打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
    w+	打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
    a	打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
    a+	打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。


读：
    read() 读取全部文本返回字符串格式
    readline() 读取一行一行返回字符串格式
    readlines() 读取全部文本返回列表格式
    
    read()功能较单一
    readline()，readlines功能上类似，而readlines()效率相对高
写：

"""

# 绝对路径/相对路径
"""
绝对路径:
相对路径：
"""


# os
"""
os.name() 获取工作平台 windows是nt，liunx/unix是posix
os.getcwd() 获取当前路径


"""



import requests

r = requests.post()
